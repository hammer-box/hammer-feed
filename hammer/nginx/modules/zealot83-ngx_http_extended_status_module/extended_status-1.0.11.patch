diff -ur nginx-1.0.11/src/core/ngx_connection.c nginx-1.0.11_extended_status/src/core/ngx_connection.c
--- nginx-1.0.11/src/core/ngx_connection.c	2011-11-01 19:25:15.000000000 +0800
+++ nginx-1.0.11_extended_status/src/core/ngx_connection.c	2012-02-06 10:04:09.685374537 +0800
@@ -706,6 +706,9 @@
     ngx_uint_t         instance;
     ngx_event_t       *rev, *wev;
     ngx_connection_t  *c;
+#if (NGX_STAT_EXTENDED)
+    conn_score        *cs;
+#endif
 
     /* disable warning: Win32 SOCKET is u_int while UNIX socket is int */
 
@@ -748,8 +751,16 @@
     rev = c->read;
     wev = c->write;
 
+#if (NGX_STAT_EXTENDED)
+    cs = c->cs;
+#endif
+
     ngx_memzero(c, sizeof(ngx_connection_t));
 
+#if (NGX_STAT_EXTENDED)
+    c->cs = cs;
+#endif
+
     c->read = rev;
     c->write = wev;
     c->fd = s;
diff -ur nginx-1.0.11/src/core/ngx_connection.h nginx-1.0.11_extended_status/src/core/ngx_connection.h
--- nginx-1.0.11/src/core/ngx_connection.h	2011-04-04 20:26:53.000000000 +0800
+++ nginx-1.0.11_extended_status/src/core/ngx_connection.h	2012-02-06 10:04:09.694377609 +0800
@@ -104,6 +104,11 @@
 
 
 struct ngx_connection_s {
+
+#if (NGX_STAT_EXTENDED)
+    void               *cs;
+#endif
+
     void               *data;
     ngx_event_t        *read;
     ngx_event_t        *write;
diff -ur nginx-1.0.11/src/event/ngx_event_accept.c nginx-1.0.11_extended_status/src/event/ngx_event_accept.c
--- nginx-1.0.11/src/event/ngx_event_accept.c	2010-12-02 22:20:51.000000000 +0800
+++ nginx-1.0.11_extended_status/src/event/ngx_event_accept.c	2012-02-06 10:04:09.737369788 +0800
@@ -99,7 +99,7 @@
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_accepted, 1);
 #endif
 
@@ -117,10 +117,15 @@
             return;
         }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        set_conn_active(c);
+        set_conn_mode(c, SERVER_READY);
+#endif
+
         c->pool = ngx_create_pool(ls->pool_size, ev->log);
         if (c->pool == NULL) {
             ngx_close_accepted_connection(c);
@@ -222,7 +227,7 @@
 
         c->number = ngx_atomic_fetch_add(ngx_connection_counter, 1);
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_handled, 1);
 #endif
 
@@ -413,9 +418,14 @@
         ngx_destroy_pool(c->pool);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
+
+#if (NGX_STAT_EXTENDED)
+    set_conn_inactive(c);
+    set_conn_mode(c, SERVER_DEAD);
+#endif
 }
 
 
diff -ur nginx-1.0.11/src/event/ngx_event.c nginx-1.0.11_extended_status/src/event/ngx_event.c
--- nginx-1.0.11/src/event/ngx_event.c	2011-11-01 21:24:50.000000000 +0800
+++ nginx-1.0.11_extended_status/src/event/ngx_event.c	2012-02-06 10:04:09.716368671 +0800
@@ -57,7 +57,7 @@
 ngx_file_t            ngx_accept_mutex_lock_file;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 ngx_atomic_t   ngx_stat_accepted0;
 ngx_atomic_t  *ngx_stat_accepted = &ngx_stat_accepted0;
@@ -74,7 +74,15 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
 
+ngx_uint_t      ngx_num_workers;
+size_t          shm_size = 0;
+worker_score   *workers;
+conn_score     *conns;
+worker_score   *my_worker;
+
+#endif
 
 static ngx_command_t  ngx_events_commands[] = {
 
@@ -342,6 +350,40 @@
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static void
+init_request_cnt(request_cnt *recent_request_cnt)
+{
+    ngx_uint_t  i;
+
+    for (i = 0; i < RECENT_PERIOD; i++) {
+        recent_request_cnt[i].time = 0;
+        recent_request_cnt[i].cnt = 0;
+    }
+}
+
+
+static void
+init_workers(worker_score *workers)
+{
+    worker_score  *ws;
+    ngx_uint_t  i;
+
+    for (i = 0; i < ngx_num_workers; i++)
+    {
+        ws = (worker_score *)((char *) workers + WORKER_SCORE_LEN * i);
+
+        ws->pid = 0;
+        ws->access_count = 0;
+        ws->bytes_sent = 0;
+        ws->mode = SERVER_READY;
+
+        init_request_cnt(ws->recent_request_cnt);
+    }
+}
+
+#endif
 
 ngx_int_t
 ngx_handle_write_event(ngx_event_t *wev, size_t lowat)
@@ -484,7 +526,13 @@
     }
 
     if (ngx_accept_mutex_ptr) {
+#if (NGX_STAT_EXTENDED)
+        shm.addr = (u_char *) ngx_accept_mutex_ptr;
+        shm.size = shm_size;
+        ngx_shm_free(&shm);
+#else
         return NGX_OK;
+#endif
     }
 
 
@@ -496,7 +544,7 @@
            + cl          /* ngx_connection_counter */
            + cl;         /* ngx_temp_number */
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     size += cl           /* ngx_stat_accepted */
            + cl          /* ngx_stat_handled */
@@ -507,6 +555,20 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    if (WORKER_SCORE_LEN < sizeof(worker_score)) {
+        ngx_log_error(NGX_LOG_EMERG, cycle->log, 0, "worker_score(%d) too large", sizeof(worker_score ));
+        return NGX_ERROR;
+    }
+
+    size += (WORKER_SCORE_LEN * ccf->worker_processes)
+        + (sizeof(conn_score) * ccf->worker_processes * cycle->connection_n);
+
+    shm_size = size;
+
+#endif
+
     shm.size = size;
     shm.name.len = sizeof("nginx_shared_zone");
     shm.name.data = (u_char *) "nginx_shared_zone";
@@ -541,7 +603,7 @@
 
     ngx_random_number = (tp->msec << 16) + ngx_pid;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     ngx_stat_accepted = (ngx_atomic_t *) (shared + 3 * cl);
     ngx_stat_handled = (ngx_atomic_t *) (shared + 4 * cl);
@@ -552,6 +614,17 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+    ngx_num_workers = ccf->worker_processes;
+
+    workers = (worker_score *) (shared + 9 * cl);
+    init_workers(workers);
+
+    conns = (conn_score *) (shared + 9 * cl + ccf->worker_processes * WORKER_SCORE_LEN);
+
+#endif
+
     return NGX_OK;
 }
 
@@ -679,6 +752,37 @@
 
     c = cycle->connections;
 
+#if (NGX_STAT_EXTENDED)
+    {
+        ngx_time_t  *tp;
+        conn_score  *cs;
+        ngx_uint_t    i;
+
+        for (i = 0; i < cycle->connection_n; i++) 
+        {
+            c [i].cs = (void *) ((char *) conns +
+                                 sizeof(conn_score) * (ngx_process_slot * cycle->connection_n + i));
+            cs = (conn_score *) c[i].cs;
+            
+            cs->bytes_sent = 0;
+            cs->access_count = 0;
+            cs->response_time = 0;
+            cs->upstream_response_time = -1;
+            cs->request[0] = '\0';
+            cs->client[0] = '\0';
+            cs->vhost[0] = '\0';
+            cs->mode = SERVER_READY;
+            
+            tp = ngx_timeofday();
+            cs->last_used = tp->sec;
+            cs->status = 0;
+            cs->zin = 0;
+            cs->zout = 0;
+            cs->active = 0;
+        }
+    }
+#endif
+
     cycle->read_events = ngx_alloc(sizeof(ngx_event_t) * cycle->connection_n,
                                    cycle->log);
     if (cycle->read_events == NULL) {
diff -ur nginx-1.0.11/src/event/ngx_event.h nginx-1.0.11_extended_status/src/event/ngx_event.h
--- nginx-1.0.11/src/event/ngx_event.h	2009-08-30 17:52:39.000000000 +0800
+++ nginx-1.0.11_extended_status/src/event/ngx_event.h	2012-02-06 10:04:09.724371185 +0800
@@ -7,7 +7,9 @@
 #ifndef _NGX_EVENT_H_INCLUDED_
 #define _NGX_EVENT_H_INCLUDED_
 
-
+#if (NGX_STAT_EXTENDED)
+#include <sys/times.h>
+#endif
 #include <ngx_config.h>
 #include <ngx_core.h>
 
@@ -508,7 +510,7 @@
 extern ngx_int_t              ngx_accept_disabled;
 
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
 extern ngx_atomic_t  *ngx_stat_accepted;
 extern ngx_atomic_t  *ngx_stat_handled;
@@ -519,6 +521,87 @@
 
 #endif
 
+#if (NGX_STAT_EXTENDED)
+
+#define  SCORE__REQUEST_LEN            128
+#define  SCORE__CLIENT_LEN              32
+#define  SCORE__VHOST_LEN               32
+
+#define  CL_SIZE                       128
+#define  WORKER_SCORE_LEN              640      /* 128 X 5 */
+
+#define  SERVER_READY                   '-'
+#define  SERVER_BUSY_READ               'R'
+#define  SERVER_BUSY_WRITE              'W'
+#define  SERVER_BUSY_LOG                'L'
+#define  SERVER_DEAD                    'I'
+
+#define  RECENT_PERIOD                  64
+#define  RECENT_MASK            0x0000003F
+
+typedef struct {
+    uint32_t  time;
+    uint32_t  cnt;
+} request_cnt;
+
+
+typedef struct {
+    request_cnt     recent_request_cnt[RECENT_PERIOD];
+    struct  tms     times;
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_uint_t      access_count;
+    ngx_pid_t       pid;
+    char            mode;
+} worker_score;
+
+
+typedef struct {
+    u_char  request[SCORE__REQUEST_LEN];
+    u_char  client[SCORE__CLIENT_LEN];
+    u_char  vhost[SCORE__VHOST_LEN];
+    time_t          last_used;
+    ngx_uint_t      bytes_sent;
+    ngx_uint_t      access_count;
+    char            mode ;
+    ngx_msec_int_t  response_time;
+    ngx_msec_int_t  upstream_response_time;
+    ngx_uint_t      status;
+    size_t          zin;
+    size_t          zout;
+    char            active;
+} conn_score;
+
+
+extern  worker_score  *workers;
+extern  worker_score  *my_worker;
+extern  conn_score    *conns;
+
+
+static inline void
+set_conn_active(ngx_connection_t *c)
+{
+    conn_score  *score = (conn_score *) c->cs;
+    score->active = 1 ;
+}
+
+
+static inline void
+set_conn_inactive(ngx_connection_t *c)
+{
+    conn_score  *score = (conn_score *) c->cs;
+    score->active = 0 ;
+}
+
+
+static inline void
+set_conn_mode(ngx_connection_t *c, char mode)
+{
+    conn_score  *score = (conn_score *) c->cs;
+    score->mode = mode ;
+}
+
+#endif
 
 #define NGX_UPDATE_TIME         1
 #define NGX_POST_EVENTS         2
diff -ur nginx-1.0.11/src/http/modules/ngx_http_gzip_filter_module.c nginx-1.0.11_extended_status/src/http/modules/ngx_http_gzip_filter_module.c
--- nginx-1.0.11/src/http/modules/ngx_http_gzip_filter_module.c	2010-10-04 23:03:00.000000000 +0800
+++ nginx-1.0.11_extended_status/src/http/modules/ngx_http_gzip_filter_module.c	2012-02-06 10:04:09.743396883 +0800
@@ -949,6 +949,15 @@
 
     r->connection->buffered &= ~NGX_HTTP_GZIP_BUFFERED;
 
+#if (NGX_STAT_EXTENDED)
+    {
+        conn_score  *cs = r->connection->cs;
+        
+        cs->zin = ctx->zin;
+        cs->zout = ctx->zout;
+    }
+#endif
+
     return NGX_OK;
 }
 
diff -ur nginx-1.0.11/src/http/ngx_http_request.c nginx-1.0.11_extended_status/src/http/ngx_http_request.c
--- nginx-1.0.11/src/http/ngx_http_request.c	2011-12-15 02:00:50.000000000 +0800
+++ nginx-1.0.11_extended_status/src/http/ngx_http_request.c	2012-02-06 10:04:09.764371743 +0800
@@ -205,10 +205,15 @@
     rev->handler = ngx_http_init_request;
     c->write->handler = ngx_http_empty_handler;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_READ;
+    set_conn_mode(c, SERVER_BUSY_READ);
+#endif
+
     if (rev->ready) {
         /* the deferred accept(), rtsig, aio, iocp */
 
@@ -224,9 +229,15 @@
     ngx_add_timer(rev, c->listening->post_accept_timeout);
 
     if (ngx_handle_read_event(rev, 0) != NGX_OK) {
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
 #endif
+
+#if (NGX_STAT_EXTENDED)
+        my_worker->mode = SERVER_READY;
+        set_conn_mode(c, SERVER_READY);
+#endif
+
         ngx_http_close_connection(c);
         return;
     }
@@ -254,12 +265,17 @@
     ngx_http_in6_addr_t        *addr6;
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
 #endif
 
     c = rev->data;
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_READY;
+    set_conn_mode(c, SERVER_READY);
+#endif
+
     if (rev->timedout) {
         ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
 
@@ -509,12 +525,23 @@
     ctx->current_request = r;
     r->log_handler = ngx_http_log_error_handler;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
     r->stat_reading = 1;
     (void) ngx_atomic_fetch_add(ngx_stat_requests, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    {
+        conn_score  *cs = (conn_score *) c->cs;
+        ngx_time_t  *tp = ngx_timeofday();
+        
+        my_worker->mode = SERVER_BUSY_READ;
+        set_conn_mode(c, SERVER_BUSY_READ);
+        cs->last_used = tp->sec;
+    }
+#endif
+
     rev->handler(rev);
 }
 
@@ -1653,13 +1680,18 @@
         ngx_del_timer(c->read);
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
     r->stat_reading = 0;
     (void) ngx_atomic_fetch_add(ngx_stat_writing, 1);
     r->stat_writing = 1;
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_WRITE;
+    set_conn_mode(c, SERVER_BUSY_WRITE);
+#endif
+
     c->read->handler = ngx_http_request_handler;
     c->write->handler = ngx_http_request_handler;
     r->read_event_handler = ngx_http_block_reading;
@@ -2488,10 +2520,15 @@
 
         ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0, "pipelined request");
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
         (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+        my_worker->mode = SERVER_BUSY_READ;
+        set_conn_mode(c, SERVER_BUSY_READ);
+#endif
+
         hc->pipeline = 1;
         c->log->action = "reading client pipelined request line";
 
@@ -2719,10 +2756,15 @@
 
     b->last += n;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_reading, 1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_READ;
+    set_conn_mode(c, SERVER_BUSY_READ);
+#endif
+
     c->log->handler = ngx_http_log_error;
     c->log->action = "reading client request line";
 
@@ -2918,6 +2960,60 @@
     return NGX_OK;
 }
 
+#if (NGX_STAT_EXTENDED)
+
+static inline void
+update_request_cnt(worker_score *worker, conn_score *cs, uint32_t sec)
+{
+    uint32_t  index;
+
+    index = sec & RECENT_MASK;
+    if (sec == worker->recent_request_cnt[index].time) {
+        worker->recent_request_cnt[index].cnt += 1;
+    }
+    else {
+        worker->recent_request_cnt[index].time = sec;
+        worker->recent_request_cnt[index].cnt = 1;
+    }
+}
+
+
+static inline  ngx_msec_int_t
+get_response_time(ngx_time_t *tp, ngx_http_request_t *r)
+{
+    ngx_msec_int_t  ms;
+
+    ms = (ngx_msec_int_t) ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
+    ms = ( 0 <= ms ) ? ms : 0;
+
+    return ms;
+}
+
+static inline  ngx_msec_int_t
+get_proxy_response_time(ngx_http_request_t  *r)
+{
+    ngx_http_upstream_state_t  *state;
+    ngx_msec_int_t  ms = -1;
+    ngx_uint_t  i;
+
+    if (NULL != r->upstream_states && 0 < r->upstream_states->nelts)
+    {
+        state = r->upstream_states->elts;
+        for (i = 0; i < r->upstream_states->nelts; i++)
+        {
+            if (0 != state[i].status)
+            {
+                ms = (ngx_msec_int_t) (state[i].response_sec * 1000 + state [i].response_msec);
+                ms = (0 <= ms) ? ms : 0;
+                break;
+            }
+        }
+    }
+
+    return ms;
+}
+
+#endif
 
 static void
 ngx_http_close_request(ngx_http_request_t *r, ngx_int_t rc)
@@ -2954,6 +3050,11 @@
     ngx_http_log_ctx_t        *ctx;
     ngx_http_core_loc_conf_t  *clcf;
 
+#if (NGX_STAT_EXTENDED)
+    conn_score  *cs = r->connection->cs;
+    ngx_time_t  *tp ;
+#endif
+
     log = r->connection->log;
 
     ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http close request");
@@ -2969,7 +3070,7 @@
         }
     }
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
 
     if (r->stat_reading) {
         (void) ngx_atomic_fetch_add(ngx_stat_reading, -1);
@@ -2987,6 +3088,49 @@
 
     log->action = "logging request";
 
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_BUSY_LOG;
+    set_conn_mode(r->connection, SERVER_BUSY_LOG);
+
+    if (0 < r->headers_in.server.len &&  NULL != r->request_line.data) {
+
+        tp = ngx_timeofday();
+
+        if (my_worker->last_used != tp->sec)
+            times(&(my_worker->times ));
+
+        my_worker->last_used = tp->sec;
+        cs->last_used = tp->sec;
+
+        cs->response_time = get_response_time(tp, r);
+        cs->upstream_response_time = get_proxy_response_time(r);
+
+        my_worker->bytes_sent += r->connection->sent;
+        cs->bytes_sent = r->connection->sent;
+
+        my_worker->access_count++;
+        cs->access_count++;
+
+        update_request_cnt(my_worker, cs, (uint32_t) tp->sec);
+
+        cs->status = r->err_status ? r->err_status : r->headers_out.status;
+
+        if (NULL != r->connection->addr_text.data) {
+            ngx_cpystrn(cs->client, r->connection->addr_text.data,
+                        r->connection->addr_text.len >= SCORE__CLIENT_LEN ?
+                        SCORE__CLIENT_LEN : (r->connection->addr_text.len + 1));
+        }
+        if (0 < r->headers_in.server.len) {
+            ngx_cpystrn(cs->vhost, r->headers_in.server.data, SCORE__VHOST_LEN <= r->headers_in.server.len ?
+                        SCORE__VHOST_LEN : (r->headers_in.server.len + 1));
+        }
+        if (NULL != r->request_line.data) {
+            ngx_cpystrn(cs->request, r->request_line.data, r->request_line.len >= SCORE__REQUEST_LEN ?
+                        SCORE__REQUEST_LEN : (r->request_line.len + 1));
+        }
+    }
+#endif
+
     ngx_http_log_request(r);
 
     log->action = "closing request";
@@ -3016,6 +3160,11 @@
     r->connection->destroyed = 1;
 
     ngx_destroy_pool(r->pool);
+
+#if (NGX_STAT_EXTENDED)
+    my_worker->mode = SERVER_READY;
+    set_conn_mode(r->connection, SERVER_READY);
+#endif
 }
 
 
@@ -3056,10 +3205,15 @@
 
 #endif
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
 #endif
 
+#if (NGX_STAT_EXTENDED)
+    set_conn_inactive(c);
+    set_conn_mode(c, SERVER_DEAD);
+#endif
+
     c->destroyed = 1;
 
     pool = c->pool;
diff -ur nginx-1.0.11/src/http/ngx_http_request.h nginx-1.0.11_extended_status/src/http/ngx_http_request.h
--- nginx-1.0.11/src/http/ngx_http_request.h	2011-08-29 18:39:23.000000000 +0800
+++ nginx-1.0.11_extended_status/src/http/ngx_http_request.h	2012-02-06 10:04:09.769370626 +0800
@@ -514,7 +514,7 @@
     unsigned                          filter_need_temporary:1;
     unsigned                          allow_ranges:1;
 
-#if (NGX_STAT_STUB)
+#if (NGX_STAT_STUB || NGX_STAT_EXTENDED)
     unsigned                          stat_reading:1;
     unsigned                          stat_writing:1;
 #endif
diff -ur nginx-1.0.11/src/os/unix/ngx_process.c nginx-1.0.11_extended_status/src/os/unix/ngx_process.c
--- nginx-1.0.11/src/os/unix/ngx_process.c	2011-11-01 21:24:50.000000000 +0800
+++ nginx-1.0.11_extended_status/src/os/unix/ngx_process.c	2012-02-06 10:04:09.776372302 +0800
@@ -33,6 +33,10 @@
 ngx_int_t        ngx_last_process;
 ngx_process_t    ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+ngx_int_t        old_ngx_last_process = 0;
+ngx_process_t    old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 ngx_signal_t  signals[] = {
     { ngx_signal_value(NGX_RECONFIGURE_SIGNAL),
diff -ur nginx-1.0.11/src/os/unix/ngx_process_cycle.c nginx-1.0.11_extended_status/src/os/unix/ngx_process_cycle.c
--- nginx-1.0.11/src/os/unix/ngx_process_cycle.c	2011-11-01 21:24:50.000000000 +0800
+++ nginx-1.0.11_extended_status/src/os/unix/ngx_process_cycle.c	2012-02-06 10:04:09.791691576 +0800
@@ -237,6 +237,15 @@
 
             ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0, "reconfiguring");
 
+#if (NGX_STAT_EXTENDED)
+            old_ngx_last_process = ngx_last_process;
+            for (i = 0; i < old_ngx_last_process; i++)
+                old_ngx_processes[i] = ngx_processes[i];
+
+            ngx_last_process = 0;
+            ngx_process_slot = 0;
+#endif
+
             cycle = ngx_init_cycle(cycle);
             if (cycle == NULL) {
                 cycle = (ngx_cycle_t *) ngx_cycle;
@@ -486,6 +495,64 @@
 
     ch.fd = -1;
 
+#if (NGX_STAT_EXTENDED)
+    if ( NGX_CMD_QUIT == ch.command && 0 < old_ngx_last_process )
+    {
+        for (i = 0; i < old_ngx_last_process; i++) {
+            ngx_log_debug7(NGX_LOG_DEBUG_EVENT, cycle->log, 0,
+                           "child: %d %P e:%d t:%d d:%d r:%d j:%d",
+                           i,
+                           old_ngx_processes[i].pid,
+                           old_ngx_processes[i].exiting,
+                           old_ngx_processes[i].exited,
+                           old_ngx_processes[i].detached,
+                           old_ngx_processes[i].respawn,
+                           old_ngx_processes[i].just_spawn);
+            
+            if (old_ngx_processes[i].detached || old_ngx_processes[i].pid == -1)
+                continue;
+            
+            if (old_ngx_processes[i].exiting && signo == ngx_signal_value( NGX_SHUTDOWN_SIGNAL))
+                continue;
+            
+            if (ch.command) {
+                if (ngx_write_channel(old_ngx_processes[i].channel[0], &ch, sizeof(ngx_channel_t), cycle->log) == NGX_OK) {
+                    if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                        old_ngx_processes[i].exiting = 1;
+                    
+                    continue;
+                }
+            }
+            
+            ngx_log_debug2(NGX_LOG_DEBUG_CORE, cycle->log, 0,
+                           "kill (%P, %d)", old_ngx_processes[i].pid, signo);
+            
+            if (kill(old_ngx_processes[i].pid, signo) == -1) {
+                err = ngx_errno;
+                ngx_log_error(NGX_LOG_ALERT, cycle->log, err,
+                              "kill(%P, %d) failed", old_ngx_processes[i].pid, signo);
+                
+                if (err == NGX_ESRCH) {
+                    old_ngx_processes[i].exited = 1;
+                    old_ngx_processes[i].exiting = 0;
+                    ngx_reap = 1;
+                }
+                continue;
+            }
+            
+            if (signo != ngx_signal_value(NGX_REOPEN_SIGNAL))
+                old_ngx_processes[i].exiting = 1;
+        }
+        
+        old_ngx_last_process = -1;
+
+        for (i = 0; i < ngx_last_process; i++) {
+            ngx_processes [i].just_spawn = 0 ;
+        }
+     
+        return ;
+    }
+#endif
 
     for (i = 0; i < ngx_last_process; i++) {
 
@@ -726,6 +793,21 @@
 
     ngx_setproctitle("worker process");
 
+#if (NGX_STAT_EXTENDED)
+    {
+        my_worker = (worker_score *) ((char *) workers + WORKER_SCORE_LEN * ngx_process_slot);
+        ngx_time_t  *tp = ngx_timeofday();
+        
+        my_worker->last_used = tp->sec;
+        my_worker->pid = ngx_getpid();
+        my_worker->bytes_sent = 0L;
+        my_worker->access_count = 0L;
+        my_worker->mode = SERVER_READY;
+        
+        times(&my_worker->times);
+    }
+#endif
+
 #if (NGX_THREADS)
     {
     ngx_int_t         n;
diff -ur nginx-1.0.11/src/os/unix/ngx_process.h nginx-1.0.11_extended_status/src/os/unix/ngx_process.h
--- nginx-1.0.11/src/os/unix/ngx_process.h	2009-08-10 21:07:15.000000000 +0800
+++ nginx-1.0.11_extended_status/src/os/unix/ngx_process.h	2012-02-06 10:04:09.782400794 +0800
@@ -82,5 +82,9 @@
 extern ngx_int_t      ngx_last_process;
 extern ngx_process_t  ngx_processes[NGX_MAX_PROCESSES];
 
+#if (NGX_STAT_EXTENDED)
+extern ngx_int_t      old_ngx_last_process;
+extern ngx_process_t  old_ngx_processes[NGX_MAX_PROCESSES];
+#endif
 
 #endif /* _NGX_PROCESS_H_INCLUDED_ */
